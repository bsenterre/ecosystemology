#if()
eevector <- eevector %>% mutate(occurrenceID = "", nomenclaturalStatus = "", recordedBy = "",
recordNumber = "", eventDate = "")
#Get a point centroid version of the Earth Engine layer
eevectorPt <- eevector
eevectorPt$centroid <- st_centroid(eevectorPt$geometry)
eevectorPt <- eevectorPt %>%
mutate(lon=purrr::map_dbl(geometry, ~st_centroid(.x)[[1]]),
lat = purrr::map_dbl(geometry, ~st_centroid(.x)[[2]]))
eevectorPt <- eevectorPt %>% dplyr::select(occurrenceID, nomenclaturalStatus, ecoSpeciesENFR, ecoSpeciesFR,
synof_ecoSpeciesID, recordedBy, recordNumber, eventDate, lon, lat)
eevectorPt <- dplyr::select(as.data.frame(eevectorPt), -geometry)
eevectorPt <- st_as_sf(eevectorPt[!is.na(eevectorPt$lat),], coords = c("lon", "lat"), crs=4326 )
#Combine gbif points, EE geometries and their centroid
gbif_ee <- rbind(eevectorPt, eevector, gbif_ecoSpeciesSelected)
#map_mapview <- mapview(gbif_ee, zcol = "nomenclaturalStatus")
#map_mapview@map
#Get the EE raster
if(file.exists(paste0("ecoSp_",ecoSpSelected_r(),".tif"))) {
#tmpraster <- raster::raster(paste0("ecoSp_",ecoSpSelected_r(),".tif"))
###inputraster <- terra::rast(paste0("ecoSp_",ecoSpSelected_r(),".tif")) #20200505100648 #20200505130451
###tmpraster <- terra::aggregate(inputraster, fact=5, fun="max", na.rm=TRUE)
#mapraster <- mapview(tmpraster, na.color="transparent") #OR layer.name = NULL, na.color = NA
#mapall <- mapraster + mapview(gbif_ee, zcol = "nomenclaturalStatus")
req(rasterSelected_r())
#Bring the raster to points
#tmprasterPt <- raster::rasterToPoints(tmpraster, spatial=TRUE)
tmprasterPt <- terra::as.points(rasterSelected_r(), values=TRUE, na.rm=TRUE) #tmpraster
#aggregate from 100x100m resolution to 500x500 (factor = 5) #Do it via Terra
### xxyyzz ## a1 <- aggregate(r, 4)
tmprasterPt <- st_as_sf(tmprasterPt) ######LIMITING STEP
tmprasterPt$synof_ecoSpeciesID <- ecoSpSelected_r()
tmprasterPt <- tmprasterPt[,c("synof_ecoSpeciesID")]
#Then put them all together
ecoSp <- rbind(gbif_ecoSpeciesSelected[,c("synof_ecoSpeciesID")], eevectorPt[,c("synof_ecoSpeciesID")], tmprasterPt)
} else {
#If raster does not exist for the selected species
ecoSp <- rbind(gbif_ecoSpeciesSelected, eevectorPt)
ecoSp <- ecoSp[,c("synof_ecoSpeciesID")]
#mapall <- mapview(gbif_ee, zcol = "nomenclaturalStatus")
}
#Get the RLE metrics
#Get the RLE using redlistr: requires input as spatial points (sp) or raster with CRS in meters (For Guinea: UTM29N (EPSG=32629)) ###32740 for Seychelles
ecoSputm <- sf::st_transform(ecoSp, crs=32629)
ecoSpRLE <- ecoSputm %>% as('Spatial')
#For RLE the standard grid size is in principle 10000 (10 km), but for Seychelles I might also want to see a 2km grid and functional occurrence grid cells (see 6 KBA report 2022)
#BUT in general I definitly want to enrich the grid attributes with more nice indices of biodiversity and conservation value, from a specific eco-species perspective
#WE WANT THE COLORING OF THE POINT OCCURRENCE AND GRID CELLS TO REFLECT STATE CONDITION
if(nrow(ecoSpRLE)>1) {
AOO <- getAOO(ecoSpRLE, grid.size = 10000, min.percent.rule = FALSE, percent = 10)
EOOpolygon <- makeEOO(ecoSpRLE)
EOOarea <- round(getAreaEOO(EOOpolygon), digits=0)
EOOpolygon$EOOkm2 <- EOOarea
AOOpolygon <- makeAOOGrid(ecoSpRLE, 10000, min.percent.rule = FALSE,percent = 10)
AOOpolygon$AOONumberOf2000GridCells <- AOO
}
mapviewOptions(basemaps = c("OpenStreetMap", "Esri.WorldTopoMap", "Esri.WorldImagery"))
mapall <- mapview(gbif_ee, zcol = "nomenclaturalStatus")
if(nrow(ecoSpRLE)>1) {
mapAOOEOO <- mapview(AOOpolygon, color="blue", alpha.regions = 0, lwd=0.5, legend=FALSE) + mapview(EOOpolygon, color="#50b397", alpha.regions=0, lwd=2, legend=FALSE)
map_mapview <- mapall + mapAOOEOO
} else {
map_mapview <- mapall
}
map_mapviewPlusUnidentOcc <- mapview(EDmap, cex = 2, lwd=0, color='darkred', col.regions='darkred', legend=FALSE, layer.name="unidentifiedOcc", hide = TRUE)
#to be added as small points and not loaded by default
map_mapview <- map_mapview + map_mapviewPlusUnidentOcc
map_mapview@map
})
# })
#  selEcoSp_r <- reactive({
#    req(input$mytable_ecoSpeciesList_rows_selected)
#  selRow <- ecoSpeciesList[input$mytable_ecoSpeciesList_rows_selected,]
#  selEcoSp <- selRow$ecoSpecies
#  return(selEcoSp)
#print(selRow[[1]])
#})
#)
output$myKBAStats <- renderDT({
if(file.exists(paste0("ecoSp_",ecoSpSelected_r(),".tif"))) {
###inputraster <- terra::rast(paste0("ecoSp_",ecoSpSelected_r(),".tif")) #20200505100648
###tmpraster <- terra::aggregate(inputraster, fact=5, fun="max", na.rm=TRUE)
req(rasterSelected_r())
tmpraster2 <- round(terra::cellSize(rasterSelected_r(), unit="ha"), digits=1) #tmpraster
KBAStats <- terra::extract(tmpraster2, KBA, fun='sum', na.rm=TRUE)#, bind=TRUE)
KBAStats2 <- cbind(as.data.frame(KBA[,c("SitRecID", "NatName")]), KBAStats)
KBAStats2 <- KBAStats2[,c(1,2,4)]
KBAStats3 <- filter(KBAStats2, KBAStats2[,3] > 0)
KBAStats3$ha <- KBAStats3[,3]
KBAStatsDT <- setDT(KBAStats3)
KBAStatsDT <- setorder(KBAStatsDT,-ha)
#Gett he total ha cover of the ecosystem
total <- round(terra::expanse(tmpraster2, unit="ha"), digits = 0)
KBAStatsDT$ratioOfTotal <- round(KBAStatsDT$ha *100 / total, digits=1)
DT::datatable(KBAStatsDT[,c(2,4,5)], options=list(dom='t'))
} else {
#If no raster then count the ratio based on ecoOccurrence data
gbif_ecoSpeciesSelected <- ecoSpeciesMap[ecoSpeciesMap$synof_ecoSpeciesID == ecoSpSelected_r(),"synof_ecoSpeciesID"]
#KBAStats <- terra::extract(KBA, terra::vect(gbif_ecoSpeciesSelected), fun='sum')#, na.rm=TRUE)
ecoSpKBA <- st_join(gbif_ecoSpeciesSelected, st_as_sf(KBA[,c("NatName")])) %>% as.data.frame()
KBAStats <- ecoSpKBA %>% dplyr::group_by(NatName) %>% dplyr::summarize(nOcc=n())
KBAStatsDT <- setDT(KBAStats)
KBAStatsDT <- setorder(KBAStatsDT,-nOcc)
DT::datatable(KBAStatsDT)
}
})
#Get the eco-species occurrences table
#  observe({
#    req(input$mySpList_rows_selected) #this returns the index (nÂ°) of the selected row
#   selRow <- ecoSpeciesFiltered_r()[mySpList_rows_selected,] #get that row from the table
#    selEcoSpeciesID <- selRow$ecoSpeciesID
output$mySpOcc <- renderDT({
ecoSpeciesOccSelected <- ecoSpeciesOccurrences[ecoSpeciesOccurrences$synof_ecoSpeciesID == ecoSpSelected_r(),] #selEcoSp_r(),]
DT::datatable(ecoSpeciesOccSelected[,c("synof_ecoSpecies", "synof_ecoSpeciesID", "ecoSpecies", "ecoSpeciesID", "identificationReference", "identificationReferencePage","nomenclaturalStatus", "lastEidentidentifiedBy", "lastEidentdateIdentified", "occurrenceID", "country", "locality", "decimalLatitude", "decimalLongitude", "verbatimElevation", "recordedBy", "recordNumber", "eventDate")],
extensions = c('Scroller', 'FixedColumns', 'Buttons'),
options = list(
#deferRender = TRUE,
autoWidth = TRUE,
pageLength=100,
dom='Bfrtip', #Bfrtip is for buttons
buttons=c('copy', 'csv' ,'excel'), #last bit for buttons
columnDefs = list(list(width = '100px', targets = c(1,3))),
fixedColumns = list(leftColumns = 2),
#scroller = TRUE,
scrollX = TRUE,#200,
scrollY = TRUE#200,
#columnDefs = list(list(width = 3, targets = c(1:3)))
)
) %>% formatStyle(columns = c(1,3), width=4)#'200px')
#%>% DT::formatStyle(columns= 1:5, lineHeight='90%')
})
##### LOKK INTO ELLIPSIS: https://www.appsloveworld.com/r/100/107/r-shiny-dashboard-datatable-column-width
# })
#Get the map for the selected eco-species
# output$mymap <- renderLeaflet({
#   ecoSpeciesSelected <- ecoSpeciesMap[ecoSpeciesMap$synof_ecoSpecies == input$ecoSpeciesSelect, ]
# map_mapview <- mapview(ecoSpeciesSelected, zcol = "nomenclaturalStatus")
# map_mapview@map
#})
}
shinyApp(ui = ui, server = server)
#bioecosystem version 1.0
#Shiny App based on saved output files from bioecosystem.R script in bioecosystem Project, using rgee
#Here we show the results of the ecosystem data manipulations in the form of maps and RLE assessments
# https://mastering-shiny.org/reactivity-objects.html
#Load libraries
library(data.table)
library(dplyr)
library(DT)
library(sf)
library(leaflet)
library(mapview)
library(shiny)
library(shinydashboard)
library(redlistr)
library(terra)
#library(geojsonio)
#Shiny app cannot run from a project subdirectory, so I have to run it by opening this script outside of the bioecosystem RStudio project
#setwd(paste0(getwd(),"/bioecosystemShiny"))
options(DT.options = list(pageLength = 50), scrollX = TRUE, scrollY  = TRUE)
##########1. Intro code (runs 1 time)
#Get input data
ecoSpeciesList = data.table::fread("ecoSpeciesList.txt", header = TRUE, sep = "\t", dec = ".", encoding = "UTF-8")
ecoSpeciesList$ecoSpeciesID <- as.character(ecoSpeciesList$ecoSpeciesID)
ecoSpeciesList$synof_ecoSpeciesID <- as.character(ecoSpeciesList$synof_ecoSpeciesID)
ecoSpeciesOccurrences = data.table::fread("ecoSpeciesOccurrences.txt", header = TRUE, sep = "\t", dec = ".", encoding = "UTF-8")
ecoSpeciesOccurrences$ecoSpeciesID <- as.character(ecoSpeciesOccurrences$ecoSpeciesID)
ecoSpeciesOccurrences$synof_ecoSpeciesID <- as.character(ecoSpeciesOccurrences$synof_ecoSpeciesID)
ED = data.table::fread("occurrence.txt", header = TRUE, sep = "\t", dec = ".", encoding = "UTF-8") %>% dplyr::select(!id) #, colClasses = 'character'
#ED = data.table::fread("D:/Database/Bio/gbif/Exports_BIO_to_GBIF/GBIFExport_OccurrencesEcosystem.txt", header = TRUE, sep = "\t", dec = ".", encoding = "UTF-8", colClasses = 'character')
#Eident = data.table::fread("D:/Database/Bio/gbif/Exports_BIO_to_GBIF/GBIFExport_OccurrencesEcosystemIdentificationHistory.txt", header = TRUE, sep = "\t", dec = ".", encoding = "UTF-8", colClasses = 'character')
#Eident <- str_replace_all(Eident, "[", "")
#Eident <- Eident[, taxonRemarks := str_replace(taxonRemarks, "[", "")]
#data.table::fwrite(Eident[,c("taxonRemarks")], file = "D:/Eident.txt", append = FALSE, quote = TRUE, sep = "\t")
#Get the other input data from EE (bioOccurrencesPolygon, etc., and compose rasters)
#Link those objects to the taxonomy lists used in the users' input boxes, or select frm datatable
#Get BIO ecotaxonomic backbone
ecoGe = data.table::fread("D:/Database/Bio/gbif/Exports_BIO_to_GBIF/bs_hab_ge.txt", header = TRUE, sep = "\t", dec = ".", encoding = "UTF-8", colClasses = 'character')
ecoFa = data.table::fread("D:/Database/Bio/gbif/Exports_BIO_to_GBIF/bs_hab_fa.txt", header = TRUE, sep = "\t", dec = ".", encoding = "UTF-8", colClasses = 'character')
ecoOr = data.table::fread("D:/Database/Bio/gbif/Exports_BIO_to_GBIF/bs_hab_or.txt", header = TRUE, sep = "\t", dec = ".", encoding = "UTF-8", colClasses = 'character')
ecoSpList <- sort(unique(ecoSpeciesList$ecoSpecies))
ecoFaList <- sort(unique(ecoSpeciesList$ecoFamily))#sort(unique(ecoFa$hab_fa))#
#Get ecoSpeciesOccurrences data with coordinates
data <- as.data.frame(ecoSpeciesOccurrences)
#data$decimalLatitude <- as.numeric(data$decimalLatitude)
#data$decimalLongitude <- as.numeric(data$decimalLongitude) #251
ecoSpeciesMap <- data[!is.na(data$decimalLatitude) & !is.na(data$decimalLongitude),]
#ecoSpeciesMap <- ecoSpeciesMap[ecoSpeciesMap$decimalLatitude > 0 | ecoSpeciesMap$decimalLatitude < 0,] #251
ecoSpeciesMap <- ecoSpeciesMap[ecoSpeciesMap$decimalLatitude > -90 & ecoSpeciesMap$decimalLatitude < 90,] #251
ecoSpeciesMap <- ecoSpeciesMap[ecoSpeciesMap$decimalLongitude > -180 & ecoSpeciesMap$decimalLongitude < 180,] #251
ecoSpeciesMap <- sf::st_as_sf(ecoSpeciesMap, coords = c("decimalLongitude", "decimalLatitude"), crs=4326 )
#Get all stand occurrence mappable
EDmap <- ED %>% as.data.frame()
EDmap <- EDmap[!is.na(EDmap$decimalLatitude) & !is.na(EDmap$decimalLongitude),]
EDmap <- EDmap[EDmap$decimalLatitude > -90 & EDmap$decimalLatitude < 90,] #251
EDmap <- EDmap[EDmap$decimalLongitude > -180 & EDmap$decimalLongitude < 180,] #251
EDmap <- sf::st_as_sf(EDmap, coords = c("decimalLongitude", "decimalLatitude"), crs=4326 )
EDmap <- st_crop(EDmap, xmin=-16, ymin=4, xmax=1, ymax=12)
#Get the vector data compiled in 'bioecosystem' script from Earth Engine
#Not working: eevector <- st_as_sf(geojsonio::geojson_read("ecoSpeciesOccurrences_eevector.geojson",  what = "sp"), crs = 4326)
occPosf = st_read("occPosf.shp", crs = 4326, quiet = TRUE)
occLnsf = st_read("occLnsf.shp", crs = 4326, quiet = TRUE)
occPtsf = st_read("occPtsf.shp", crs = 4326, quiet = TRUE)
#Re-do the steps of bioecosystem.Rmd to combine pt, ln, po shapes (I could not manage via geojson)
bioOcc <- rbind(occPosf, occLnsf, occPtsf)
#Since I went through shp format I abbreviated field names, so I need to get these back
bioOcc <- bioOcc %>% dplyr::rename(associatedEcoSpeciesID = assESID,basisOfRecord = bssOfRc,ecoGenusID = ecGnsID, ecoOccurrenceID = ecOccID, ecoSpeciesID = ecSpcID,  eventDate = eventDt, habitat = habitat, locality = localty, occurrenceID = occrrID, recordedBy = rcrddBy, remarks = remarks, taxonID = taxonID)
bioOcc <- bioOcc %>% dplyr::select(occurrenceID, taxonID, ecoOccurrenceID, ecoSpeciesID, associatedEcoSpeciesID, ecoGenusID, basisOfRecord, recordedBy, eventDate, locality, habitat, remarks)
#Now going on with bioecosystem.Rmd script
bioOccOccID <- bioOcc[!is.na(bioOcc$ecoOccurrenceID),]
bioOccOccID <- bioOccOccID[nchar(bioOccOccID$ecoOccurrenceID)>1,]
gbifOcc <- ecoSpeciesOccurrences %>% rename(ecoOccurrenceID = occurrenceID)
bioOccOccID <- left_join(bioOccOccID[,c("ecoOccurrenceID")], gbifOcc, by = "ecoOccurrenceID")
bioOccSpID <- bioOcc[!is.na(bioOcc$ecoSpeciesID),]
bioOccSpID <- bioOccSpID[nchar(bioOccSpID$ecoSpeciesID)>1,]
ecotaxotmp <- ecoSpeciesList[,c("lifeZoneID", "lifeZone", "ecoOrderID", "ecoOrder", "ecoFamilyID", "ecoFamily", "ecoGenusID", "ecoGenus", "ecoSpeciesID", "ecoSpecies", "ecoSpeciesTranslated", "ecoSpeciesEN", "ecoSpeciesFR", "ecoSpeciesENFR", "identificationReference", "identificationReferencePage", "identificationReferenceID", "synof_ecoSpeciesID", "synof_ecoSpecies", "synof_ecoSpeciesBiotype", "nomenclaturalStatus")]
#ecotaxotmp$ecoSpeciesID <- as.character(ecotaxotmp$ecoSpeciesID)
bioOccSpID <- left_join(bioOccSpID[,c("associatedEcoSpeciesID", "basisOfRecord", "ecoSpeciesID", "recordedBy", "eventDate")], ecotaxotmp, by = "ecoSpeciesID")
bioOcc2 <- rbind(bioOccOccID[,c("lifeZoneID", "lifeZone", "ecoOrderID", "ecoOrder", "ecoFamilyID", "ecoFamily", "ecoGenusID", "ecoGenus", "ecoSpeciesID", "ecoSpecies", "ecoSpeciesTranslated", "ecoSpeciesEN", "ecoSpeciesFR", "ecoSpeciesENFR", "identificationReference", "identificationReferencePage", "identificationReferenceID", "synof_ecoSpeciesID", "synof_ecoSpecies", "synof_ecoSpeciesBiotype", "nomenclaturalStatus")],
bioOccSpID[,c("lifeZoneID", "lifeZone", "ecoOrderID", "ecoOrder", "ecoFamilyID", "ecoFamily", "ecoGenusID", "ecoGenus", "ecoSpeciesID", "ecoSpecies", "ecoSpeciesTranslated", "ecoSpeciesEN", "ecoSpeciesFR", "ecoSpeciesENFR", "identificationReference", "identificationReferencePage", "identificationReferenceID", "synof_ecoSpeciesID", "synof_ecoSpecies", "synof_ecoSpeciesBiotype", "nomenclaturalStatus")])#, fill = TRUE)
#Read the KBA shapefile to terra
KBA = st_read("Guinea_Liberia_SierraLeone_Ivory Coast_KBA.shp", crs = 4326, quiet = TRUE)
KBA = terra::vect(KBA)
##########2. Shiny UI
# Then star with the 7.4 section: to be in the Shiny UI parameters
ui <- dashboardPage(
#dbHeader <- dashboardHeader()
#dbHeader$children[[2]]$children <-  tags$a(href='https://cloud.gbif.org/africa/resource?r=ecosystemology',
#                                        tags$img(src='Bio logo Final 1-BW-Txt',height='60',width='200'))
#dashboardPage(
dashboardHeader(title= "Ecosystemology of West African rainforests", titleWidth = 200),
#dbHeader,
dashboardSidebar(
sidebarMenu(id="sidebar",
#tag$img(src = "Bio logo Final 1-BW-Txt.png"),
#("Use the sidebar filters to help finding an eco-species, then pick one of them in the filtered table to see the corresponding map and KBA stats"),
verbatimTextOutput("myintro"),
menuItem("Eco-species list", tabName = "ecoSpeciesList"),
#menuItem("Map", tabName = "map"),
menuItem("Eco-species occurrences", tabName = "ecoSpeciesOcc"),
selectInput(inputId="faSelect", label="Select an eco-family", choices=ecoFaList, selected="Mesic"),
selectInput(inputId="geSelect", label="Select an eco-genus", choices=NULL)
)
),
dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "ecoSpeciesList",
fluidRow(
#column(width = 12,
#splitLayout(cellWidths = c("99%", "1%"),
#      box(selectInput(inputId="ecoSpeciesSelect", label="Select an eco-species from the list of accepted names", choices=ecoSpList, selected="Affleurement rocheux de quartzite de la zone des ForÃªts tropicales montagnardes d'Afrique de l'ouest [FR]"),
#         width = 12)
#    ),
#Used this TextOutput to understand the DT row selection and how it works
#column(width = 12,
#     box(verbatimTextOutput("myEcoSp")) ),
column(width = 12,
#splitLayout(cellWidths = c("60%", "40%"),
box(width = 7,DTOutput("mySpList")),
box(width = 5, leaflet::leafletOutput("mymap"), DTOutput("myKBAStats"))
#DTOutput("mySpList"),
#leaflet::leafletOutput("mymap")
#)
)
)
),
#Next tab item
#tabItem(tabName = "map",
#        fluidRow(
#         p("Map of eco-species distribution from raw occurrence and eco-taxonomic data"),
#column(11.7,
#       leaflet::leafletOutput("mymap")
#),
#         p("App version bioecosystem 1.0")
#       )
#),
#Next tab item
tabItem(tabName = "ecoSpeciesOcc",
fluidRow(
#fillPage(DTOutput("mySpOcc", height = "100%"))
column(width = 12, height = "100%",
box(width = 12, DTOutput("mySpOcc"))
#div(style = "height:200px"),
#DTOutput("mySpOcc")
)
# box(
# title = "Box title", width = NULL, status = "primary",
#div(style = 'overflow-y: scroll', DTOutput("mySpOcc"))
)
#)
#)
)
) #Closing the tabItems
) #Closing the body
) #Closing the UI dashboard page
##########3. Shiny Server
server <- function(session, input, output) {
output$myintro <- renderPrint({"Use the sidebar filters to help finding an eco-species, then pick one of them in the filtered table to see the corresponding map and KBA stats"})
#Get the Map tabItem to load by default
updateTabItems(session, inputId = "sidebar", selected = "ecoSpeciesList")
#First observe the faSelect user input and update the user dashboard with the appropriate list
#of geSelect to pick from
observe({
ecoGenusList <- ecoSpeciesList %>% filter(ecoFamily == input$faSelect) %>% dplyr::select(ecoGenus)
updateSelectInput(session, "geSelect", "Select an eco-genus", choices=sort(unique(ecoGenusList$ecoGenus)))
})
#ecoSpeciesList_r <- reactive({ecoSpeciesList})
#Get the eco-species list table as a reactive value (for input in the map) NOOOOO
#Get the DT printed from the filters, so user can select in DT
#### The filtered table has to be a reactive object
#observe({
ecoSpeciesFiltered_r <- reactive({
mySpListFiltered <- ecoSpeciesList %>% filter(ecoFamily == input$faSelect, ecoGenus == input$geSelect, nomenclaturalStatus == "aa-Accepted name")
mySpListFiltered <- with(mySpListFiltered, mySpListFiltered[order(ecoOrderID, ecoFamilyID, ecoGenusID, ecoGenus, lifeZone, ecoSpecies) , ])
#return(ecoSpeciesFiltered)
})
#})
#Print the datatable of the ecoSpeciesList filtered
output$mySpList <- renderDT({
mySpListFiltered <- ecoSpeciesFiltered_r()
mySpListFiltered <- with(mySpListFiltered, mySpListFiltered[order(ecoOrderID, ecoFamilyID, ecoGenusID, ecoGenus, lifeZone, ecoSpecies) , ])
DT::datatable(mySpListFiltered[,c("ecoSpecies")],
#DT::datatable(ecoSpeciesList[,c("ecoOrder", "ecoFamily", "ecoGenus", "lifeZone", "ecoSpecies", "identifiedBy", "dateIdentified", "identificationReference",  "identificationReferencePage", "recordedBy", "recordNumber", "eventDate", "country", "ecoSpeciesID")],
selection = 'single')#,
#filter = "top",
#options = list(pageLength = 100)
#)
})
ecoSpSelected_r <- reactive({
req(input$mySpList_rows_selected)
rowSelected <- input$mySpList_rows_selected
tab <- ecoSpeciesFiltered_r()[as.numeric(rowSelected):as.numeric(rowSelected),]
tab$ecoSpeciesID
})
#output$myEcoSp <- renderPrint({
# req(input$mySpList_rows_selected)
#rowSelected <- input$mySpList_rows_selected
#tab <- ecoSpeciesFiltered_r()[as.numeric(rowSelected):as.numeric(rowSelected),]
#tab$ecoSpeciesID #####xxyyzz OK IT IS WORKING
#})
###Ok I got some issues of performence and crashing due to loading of raster, so let's do it once, before
rasterSelected_r <- reactive({
req(ecoSpSelected_r())
if(file.exists(paste0("ecoSp_",ecoSpSelected_r(),".tif"))) {
#tmpraster <- raster::raster(paste0("ecoSp_",ecoSpSelected_r(),".tif"))
inputraster <- terra::rast(paste0("ecoSp_",ecoSpSelected_r(),".tif")) #20200505100648 #20200505130451
terra::aggregate(inputraster, fact=5, fun="max", na.rm=TRUE)
}
})
############Get the map based on selection from the filtered checklist table
output$mymap <- renderLeaflet({
req(ecoSpSelected_r())
#    req(input$mySpList_rows_selected)
#    rowSelected <- input$mySpList_rows_selected
#    tab <- ecoSpeciesFiltered_r()[as.numeric(rowSelected):as.numeric(rowSelected),]
#    ecoSpeciesIDSelected <- tab$ecoSpeciesID
#rowSelected <- input$mySpList_rows_selected
#observe({
#        req(input$mySpList_rows_selected) #this returns the index (nÂ°) of the selected row
#  selRow <- ecoSpeciesFiltered_r()[mySpList_rows_selected,] #get that row from the table
#  print(selRow[[1]])#
#  selEcoSpeciesID <- selRow$ecoSpeciesID
#Get the gbif data
gbif_ecoSpeciesSelected <- ecoSpeciesMap[ecoSpeciesMap$synof_ecoSpeciesID == ecoSpSelected_r(),] #selEcoSp_r(),] #input$ecoSpeciesSelect, ]
gbif_ecoSpeciesSelected <- gbif_ecoSpeciesSelected %>% dplyr::select(occurrenceID, ecoSpeciesENFR, ecoSpeciesFR,
synof_ecoSpeciesID,nomenclaturalStatus, recordedBy, recordNumber, eventDate)
#ecoSpeciesSelected <- ecoSpeciesMap[ecoSpeciesMap$synof_ecoSpecies == input$ecoSpeciesSelect, ]
#Get the polygons and points of Earth Engine (e.g.ecoSPID 20200505111213)
eevector <- bioOcc2[bioOcc2$synof_ecoSpeciesID == ecoSpSelected_r(),
c("ecoSpeciesENFR", "ecoSpeciesFR", "synof_ecoSpeciesID")]
#if()
eevector <- eevector %>% mutate(occurrenceID = "", nomenclaturalStatus = "", recordedBy = "",
recordNumber = "", eventDate = "")
#Get a point centroid version of the Earth Engine layer
eevectorPt <- eevector
eevectorPt$centroid <- st_centroid(eevectorPt$geometry)
eevectorPt <- eevectorPt %>%
mutate(lon=purrr::map_dbl(geometry, ~st_centroid(.x)[[1]]),
lat = purrr::map_dbl(geometry, ~st_centroid(.x)[[2]]))
eevectorPt <- eevectorPt %>% dplyr::select(occurrenceID, nomenclaturalStatus, ecoSpeciesENFR, ecoSpeciesFR,
synof_ecoSpeciesID, recordedBy, recordNumber, eventDate, lon, lat)
eevectorPt <- dplyr::select(as.data.frame(eevectorPt), -geometry)
eevectorPt <- st_as_sf(eevectorPt[!is.na(eevectorPt$lat),], coords = c("lon", "lat"), crs=4326 )
#Combine gbif points, EE geometries and their centroid
gbif_ee <- rbind(eevectorPt, eevector, gbif_ecoSpeciesSelected)
#map_mapview <- mapview(gbif_ee, zcol = "nomenclaturalStatus")
#map_mapview@map
#Get the EE raster
if(file.exists(paste0("ecoSp_",ecoSpSelected_r(),".tif"))) {
#tmpraster <- raster::raster(paste0("ecoSp_",ecoSpSelected_r(),".tif"))
###inputraster <- terra::rast(paste0("ecoSp_",ecoSpSelected_r(),".tif")) #20200505100648 #20200505130451
###tmpraster <- terra::aggregate(inputraster, fact=5, fun="max", na.rm=TRUE)
#mapraster <- mapview(tmpraster, na.color="transparent") #OR layer.name = NULL, na.color = NA
#mapall <- mapraster + mapview(gbif_ee, zcol = "nomenclaturalStatus")
req(rasterSelected_r())
#Bring the raster to points
#tmprasterPt <- raster::rasterToPoints(tmpraster, spatial=TRUE)
tmprasterPt <- terra::as.points(rasterSelected_r(), values=TRUE, na.rm=TRUE) #tmpraster
#aggregate from 100x100m resolution to 500x500 (factor = 5) #Do it via Terra
### xxyyzz ## a1 <- aggregate(r, 4)
tmprasterPt <- st_as_sf(tmprasterPt) ######LIMITING STEP
tmprasterPt$synof_ecoSpeciesID <- ecoSpSelected_r()
tmprasterPt <- tmprasterPt[,c("synof_ecoSpeciesID")]
#Then put them all together
ecoSp <- rbind(gbif_ecoSpeciesSelected[,c("synof_ecoSpeciesID")], eevectorPt[,c("synof_ecoSpeciesID")], tmprasterPt)
} else {
#If raster does not exist for the selected species
ecoSp <- rbind(gbif_ecoSpeciesSelected, eevectorPt)
ecoSp <- ecoSp[,c("synof_ecoSpeciesID")]
#mapall <- mapview(gbif_ee, zcol = "nomenclaturalStatus")
}
#Get the RLE metrics
#Get the RLE using redlistr: requires input as spatial points (sp) or raster with CRS in meters (For Guinea: UTM29N (EPSG=32629)) ###32740 for Seychelles
ecoSputm <- sf::st_transform(ecoSp, crs=32629)
ecoSpRLE <- ecoSputm %>% as('Spatial')
#For RLE the standard grid size is in principle 10000 (10 km), but for Seychelles I might also want to see a 2km grid and functional occurrence grid cells (see 6 KBA report 2022)
#BUT in general I definitly want to enrich the grid attributes with more nice indices of biodiversity and conservation value, from a specific eco-species perspective
#WE WANT THE COLORING OF THE POINT OCCURRENCE AND GRID CELLS TO REFLECT STATE CONDITION
if(nrow(ecoSpRLE)>1) {
AOO <- getAOO(ecoSpRLE, grid.size = 10000, min.percent.rule = FALSE, percent = 10)
EOOpolygon <- makeEOO(ecoSpRLE)
EOOarea <- round(getAreaEOO(EOOpolygon), digits=0)
EOOpolygon$EOOkm2 <- EOOarea
AOOpolygon <- makeAOOGrid(ecoSpRLE, 10000, min.percent.rule = FALSE,percent = 10)
AOOpolygon$AOONumberOf2000GridCells <- AOO
}
mapviewOptions(basemaps = c("OpenStreetMap", "Esri.WorldTopoMap", "Esri.WorldImagery"))
mapall <- mapview(gbif_ee, zcol = "nomenclaturalStatus")
if(nrow(ecoSpRLE)>1) {
mapAOOEOO <- mapview(AOOpolygon, color="blue", alpha.regions = 0, lwd=0.5, legend=FALSE) + mapview(EOOpolygon, color="#50b397", alpha.regions=0, lwd=2, legend=FALSE)
map_mapview <- mapall + mapAOOEOO
} else {
map_mapview <- mapall
}
map_mapviewPlusUnidentOcc <- mapview(EDmap, cex = 2, lwd=0, color='darkred', col.regions='darkred', legend=FALSE, layer.name="unidentifiedOcc", hide = TRUE)
#to be added as small points and not loaded by default
map_mapview <- map_mapview + map_mapviewPlusUnidentOcc
map_mapview@map
})
# })
#  selEcoSp_r <- reactive({
#    req(input$mytable_ecoSpeciesList_rows_selected)
#  selRow <- ecoSpeciesList[input$mytable_ecoSpeciesList_rows_selected,]
#  selEcoSp <- selRow$ecoSpecies
#  return(selEcoSp)
#print(selRow[[1]])
#})
#)
output$myKBAStats <- renderDT({
if(file.exists(paste0("ecoSp_",ecoSpSelected_r(),".tif"))) {
###inputraster <- terra::rast(paste0("ecoSp_",ecoSpSelected_r(),".tif")) #20200505100648
###tmpraster <- terra::aggregate(inputraster, fact=5, fun="max", na.rm=TRUE)
req(rasterSelected_r())
tmpraster2 <- round(terra::cellSize(rasterSelected_r(), unit="ha"), digits=1) #tmpraster
KBAStats <- terra::extract(tmpraster2, KBA, fun='sum', na.rm=TRUE)#, bind=TRUE)
KBAStats2 <- cbind(as.data.frame(KBA[,c("SitRecID", "NatName")]), KBAStats)
KBAStats2 <- KBAStats2[,c(1,2,4)]
KBAStats3 <- filter(KBAStats2, KBAStats2[,3] > 0)
KBAStats3$ha <- KBAStats3[,3]
KBAStatsDT <- setDT(KBAStats3)
KBAStatsDT <- setorder(KBAStatsDT,-ha)
#Gett he total ha cover of the ecosystem
total <- round(terra::expanse(tmpraster2, unit="ha"), digits = 0)
KBAStatsDT$ratioOfTotal <- round(KBAStatsDT$ha *100 / total, digits=1)
DT::datatable(KBAStatsDT[,c(2,4,5)], options=list(dom='t'))
} else {
#If no raster then count the ratio based on ecoOccurrence data
gbif_ecoSpeciesSelected <- ecoSpeciesMap[ecoSpeciesMap$synof_ecoSpeciesID == ecoSpSelected_r(),"synof_ecoSpeciesID"]
#KBAStats <- terra::extract(KBA, terra::vect(gbif_ecoSpeciesSelected), fun='sum')#, na.rm=TRUE)
ecoSpKBA <- st_join(gbif_ecoSpeciesSelected, st_as_sf(KBA[,c("NatName")])) %>% as.data.frame()
KBAStats <- ecoSpKBA %>% dplyr::group_by(NatName) %>% dplyr::summarize(nOcc=n())
KBAStatsDT <- setDT(KBAStats)
KBAStatsDT <- setorder(KBAStatsDT,-nOcc)
DT::datatable(KBAStatsDT)
}
})
#Get the eco-species occurrences table
#  observe({
#    req(input$mySpList_rows_selected) #this returns the index (nÂ°) of the selected row
#   selRow <- ecoSpeciesFiltered_r()[mySpList_rows_selected,] #get that row from the table
#    selEcoSpeciesID <- selRow$ecoSpeciesID
output$mySpOcc <- renderDT({
ecoSpeciesOccSelected <- ecoSpeciesOccurrences[ecoSpeciesOccurrences$synof_ecoSpeciesID == ecoSpSelected_r(),] #selEcoSp_r(),]
DT::datatable(ecoSpeciesOccSelected[,c("synof_ecoSpecies", "synof_ecoSpeciesID", "ecoSpecies", "ecoSpeciesID", "identificationReference", "identificationReferencePage","nomenclaturalStatus", "lastEidentidentifiedBy", "lastEidentdateIdentified", "occurrenceID", "country", "locality", "decimalLatitude", "decimalLongitude", "verbatimElevation", "recordedBy", "recordNumber", "eventDate")],
extensions = c('Scroller', 'FixedColumns', 'Buttons'),
options = list(
#deferRender = TRUE,
autoWidth = TRUE,
pageLength=100,
dom='Bfrtip', #Bfrtip is for buttons
buttons=c('copy', 'csv' ,'excel'), #last bit for buttons
columnDefs = list(list(width = '100px', targets = c(1,3))),
fixedColumns = list(leftColumns = 2),
#scroller = TRUE,
scrollX = TRUE,#200,
scrollY = TRUE#200,
#columnDefs = list(list(width = 3, targets = c(1:3)))
)
) %>% formatStyle(columns = c(1,3), width=4)#'200px')
#%>% DT::formatStyle(columns= 1:5, lineHeight='90%')
})
##### LOKK INTO ELLIPSIS: https://www.appsloveworld.com/r/100/107/r-shiny-dashboard-datatable-column-width
# })
#Get the map for the selected eco-species
# output$mymap <- renderLeaflet({
#   ecoSpeciesSelected <- ecoSpeciesMap[ecoSpeciesMap$synof_ecoSpecies == input$ecoSpeciesSelect, ]
# map_mapview <- mapview(ecoSpeciesSelected, zcol = "nomenclaturalStatus")
# map_mapview@map
#})
}
shinyApp(ui = ui, server = server)
